apply plugin: "com.github.node-gradle.node"

task formatTypescriptCheck(type: YarnTask) {
  args = ['run', 'prettier', 'src', '-c', '--end-of-line', 'auto']
  inputs.dir('src')
    outputs.file('formatTypescriptCheckSuccess')
}

task formatTypescript(type: YarnTask) {
  args = ['run', 'prettier', 'src', '-w', '--end-of-line', 'auto']
  inputs.dir('src')
    outputs.file('formatTypescriptSuccess')
}


task yarnInstallDependencies(type: YarnTask) {
  args = ['install', '--network-timeout', '60000']
  inputs.file('package.json')
  inputs.file('yarn.lock')
  outputs.file('yarnInstallDependencies')
}


task typescriptModels{
    dependsOn(':generatePyTypescriptModel')
}

task yarnCheckTypescript(type: YarnTask){
    dependsOn('yarnInstallDependencies')
    dependsOn('typescriptModels')
    args = ["run","tsc","--noEmit"]
    inputs.dir('src')
    outputs.file('yarnCheckTypescript')
}

task yarnTest(type: YarnTask) {
    dependsOn('yarnInstallDependencies')
    dependsOn('typescriptModels')
    dependsOn('yarnCheckTypescript')
    args = ['test']
    inputs.dir('public')
    inputs.dir('src')
    outputs.file('yarnTest')
}

task yarnBuildStory(type: YarnTask) {
    dependsOn('yarnInstallDependencies')
    dependsOn('typescriptModels')
    args = ['build-storybook']
    inputs.dir('public')
    inputs.dir('src')
    outputs.file('yarnBuildStory')
}

task yarnLokiTest(type: YarnTask) {
    args = ['loki','--requireReference','--reactUri','file:./storybook-static']
    dependsOn('yarnBuildStory')
    inputs.dir('public')
    inputs.dir('src')
    outputs.file('yarnBuildStory')
}

task yarnBuild(type: YarnTask) {
    dependsOn('yarnInstallDependencies')
    dependsOn('typescriptModels')
    dependsOn('yarnTest')
    args = ['build']
    inputs.dir('public')
    inputs.dir('src')
    outputs.dir('build')
}

task yarnUpgrade(type: YarnTask) {
    args = ['upgrade']
}

task lintTypescript(type: YarnTask) {
    args = ['run', 'eslint',  'src', '--max-warnings=0']
    inputs.dir('src')
    outputs.file('esLintSuccess')
}

