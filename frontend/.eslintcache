[{"M:\\workspace\\cato\\frontend\\src\\pages\\ProjectPage.tsx":"1","M:\\workspace\\cato\\frontend\\src\\components\\app\\App.tsx":"2","M:\\workspace\\cato\\frontend\\src\\components\\projectrunview\\ProjectRunsView.tsx":"3","M:\\workspace\\cato\\frontend\\src\\components\\header\\Header.tsx":"4","M:\\workspace\\cato\\frontend\\src\\index.tsx":"5","M:\\workspace\\cato\\frontend\\src\\components\\project\\ProjectComponent.tsx":"6","M:\\workspace\\cato\\frontend\\src\\components\\projectsview\\ProjectsView.tsx":"7","M:\\workspace\\cato\\frontend\\src\\components\\suiteresultcomponent\\SuiteResultComponent.tsx":"8","M:\\workspace\\cato\\frontend\\src\\pages\\ProjectsPage.tsx":"9","M:\\workspace\\cato\\frontend\\src\\components\\suiteresultcomponent\\WaitingOrRunningTestResultComponent.tsx":"10","M:\\workspace\\cato\\frontend\\src\\components\\suiteresultcomponent\\FinishedTestResultComponent.tsx":"11","M:\\workspace\\cato\\frontend\\src\\utils.ts":"12"},{"size":461,"mtime":1606737149275,"results":"13","hashOfConfig":"14"},{"size":1213,"mtime":1606817478044,"results":"15","hashOfConfig":"14"},{"size":3581,"mtime":1606818419921,"results":"16","hashOfConfig":"14"},{"size":397,"mtime":1606737149123,"results":"17","hashOfConfig":"14"},{"size":562,"mtime":1606673955922,"results":"18","hashOfConfig":"14"},{"size":388,"mtime":1606675540125,"results":"19","hashOfConfig":"14"},{"size":1213,"mtime":1606815941371,"results":"20","hashOfConfig":"14"},{"size":2942,"mtime":1606832225828,"results":"21","hashOfConfig":"14"},{"size":313,"mtime":1606676000671,"results":"22","hashOfConfig":"14"},{"size":715,"mtime":1606771791364,"results":"23","hashOfConfig":"14"},{"size":1359,"mtime":1606818729133,"results":"24","hashOfConfig":"14"},{"size":366,"mtime":1606818420241,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"8j9aoe",{"filePath":"28","messages":"29","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"33"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},"M:\\workspace\\cato\\frontend\\src\\pages\\ProjectPage.tsx",[],"M:\\workspace\\cato\\frontend\\src\\components\\app\\App.tsx",["54","55"],"M:\\workspace\\cato\\frontend\\src\\components\\projectrunview\\ProjectRunsView.tsx",["56"],"import React, { Component } from \"react\";\nimport Run from \"../../models/Run\";\nimport ago from \"s-ago\";\nimport { ListGroup } from \"react-bootstrap\";\nimport styles from \"./ProjectRunsView.module.css\";\nimport { Link } from \"react-router-dom\";\nimport SuiteResult from \"../../models/SuiteResult\";\nimport Project from \"../../models/Project\";\nimport SuiteResultComponent from \"../suiteresultcomponent/SuiteResultComponent\";\nimport { formatTime } from \"../../utils\";\n\ninterface Props {\n  projectId: number;\n  currentRunId: number | null;\n}\n\ninterface State {\n  project: Project | null;\n  runs: Run[];\n  currentSuiteResults: SuiteResult[];\n}\n\nclass ProjectRunsView extends Component<Props, State> {\n  interval: any;\n\n  constructor(props: Props) {\n    super(props);\n    this.state = { project: null, runs: [], currentSuiteResults: [] };\n    this.interval = 0;\n  }\n\n  componentDidMount() {\n    this.update();\n    this.interval = setInterval(() => this.fetchRuns(), 10000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n\n  componentDidUpdate(\n    prevProps: Readonly<Props>,\n    prevState: Readonly<State>,\n    snapshot?: any\n  ) {\n    if (prevProps.currentRunId !== this.props.currentRunId) {\n      this.fetchSuiteResults();\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <h1 className={styles.projectName}>{this.state.project?.name}</h1>\n        <div className={styles.runsViewContainer}>\n          <ListGroup>\n            {this.state.runs.map((r: Run) => {\n              return (\n                <div>\n                  <Link to={`/projects/${this.props.projectId}/runs/${r.id}`}>\n                    <ListGroup.Item\n                      className={styles.runListEntry}\n                      active={this.isCurrentEntry(r)}\n                    >\n                      <p>Run #{r.id}</p>\n                      <p>{formatTime(r.started_at)}</p>\n                    </ListGroup.Item>\n                  </Link>\n                </div>\n              );\n            })}\n          </ListGroup>\n          <div className={styles.suiteResult}>\n            {this.state.currentSuiteResults.map((suiteResult: SuiteResult) => {\n              return (\n                <div>\n                  <SuiteResultComponent suiteResult={suiteResult} />\n                </div>\n              );\n            })}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  update = () => {\n    this.fetchProject();\n    this.fetchRuns();\n    this.fetchSuiteResults();\n  };\n\n  fetchProject = () => {\n    fetch(\"/api/v1/projects/\" + this.props.projectId)\n      .then((res) => res.json())\n      .then(\n        (result) => {\n          this.setState({ project: result });\n        },\n        (error) => {\n          console.log(error);\n        }\n      );\n  };\n\n  fetchRuns = () => {\n    fetch(\"/api/v1/runs/project/\" + this.props.projectId)\n      .then((res) => res.json())\n      .then(\n        (result) => {\n          console.log(result);\n          this.setState({ runs: result.reverse() });\n        },\n        (error) => {\n          console.log(error);\n        }\n      );\n  };\n\n  fetchSuiteResults = () => {\n    if (!this.props.currentRunId) {\n      return;\n    }\n    fetch(\"/api/v1/suite_results/run/\" + this.props.currentRunId)\n      .then((res) => res.json())\n      .then(\n        (result) => {\n          console.log(result);\n          this.setState({ currentSuiteResults: result });\n        },\n        (error) => {\n          console.log(error);\n        }\n      );\n  };\n\n  isCurrentEntry = (r: Run) => {\n    return r.id === this.props.currentRunId;\n  };\n}\n\nexport default ProjectRunsView;\n",["57","58"],"M:\\workspace\\cato\\frontend\\src\\components\\header\\Header.tsx",[],["59","60"],"M:\\workspace\\cato\\frontend\\src\\index.tsx",[],"M:\\workspace\\cato\\frontend\\src\\components\\project\\ProjectComponent.tsx",[],["61","62"],"M:\\workspace\\cato\\frontend\\src\\components\\projectsview\\ProjectsView.tsx",[],"M:\\workspace\\cato\\frontend\\src\\components\\suiteresultcomponent\\SuiteResultComponent.tsx",[],"M:\\workspace\\cato\\frontend\\src\\pages\\ProjectsPage.tsx",[],"M:\\workspace\\cato\\frontend\\src\\components\\suiteresultcomponent\\WaitingOrRunningTestResultComponent.tsx",[],"M:\\workspace\\cato\\frontend\\src\\components\\suiteresultcomponent\\FinishedTestResultComponent.tsx",["63"],"M:\\workspace\\cato\\frontend\\src\\utils.ts",[],{"ruleId":"64","severity":1,"message":"65","line":4,"column":20,"nodeType":"66","messageId":"67","endLine":4,"endColumn":26},{"ruleId":"64","severity":1,"message":"68","line":20,"column":11,"nodeType":"66","messageId":"67","endLine":20,"endColumn":35},{"ruleId":"64","severity":1,"message":"69","line":3,"column":8,"nodeType":"66","messageId":"67","endLine":3,"endColumn":11},{"ruleId":"70","replacedBy":"71"},{"ruleId":"72","replacedBy":"73"},{"ruleId":"70","replacedBy":"74"},{"ruleId":"72","replacedBy":"75"},{"ruleId":"70","replacedBy":"76"},{"ruleId":"72","replacedBy":"77"},{"ruleId":"78","severity":1,"message":"79","line":48,"column":9,"nodeType":"80","endLine":51,"endColumn":11},"@typescript-eslint/no-unused-vars","'Router' is defined but never used.","Identifier","unusedVar","'ProjectRunPageMatchProps' is defined but never used.","'ago' is defined but never used.","no-native-reassign",["81"],"no-negated-in-lhs",["82"],["81"],["82"],["81"],["82"],"jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You donâ€™t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]