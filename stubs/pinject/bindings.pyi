from . import binding_keys as binding_keys, decorators as decorators, errors as errors, locations as locations, providing as providing, scoping as scoping
from typing import Any, Optional

class Binding:
    binding_key: Any = ...
    proviser_fn: Any = ...
    get_binding_target_desc_fn: Any = ...
    scope_id: Any = ...
    def __init__(self, binding_key: Any, proviser_fn: Any, get_binding_target_desc_fn: Any, scope_id: Any, get_binding_loc_fn: Any) -> None: ...

def get_overall_binding_key_to_binding_maps(bindings_lists: Any): ...

class BindingMapping:
    def __init__(self, binding_key_to_binding: Any, collided_binding_key_to_bindings: Any) -> None: ...
    def verify_requirements(self, required_bindings: Any) -> None: ...
    def get(self, binding_key: Any, injection_site_desc: Any): ...

def default_get_arg_names_from_class_name(class_name: Any): ...
def get_explicit_class_bindings(classes: Any, get_arg_names_from_class_name: Any = ...): ...
def get_provider_bindings(binding_spec: Any, known_scope_ids: Any, get_arg_names_from_provider_fn_name: Any = ...): ...
def get_implicit_class_bindings(classes: Any, get_arg_names_from_class_name: Any = ...): ...

class Binder:
    def __init__(self, collected_bindings: Any, scope_ids: Any) -> None: ...
    def bind(self, arg_name: Any, annotated_with: Optional[Any] = ..., to_class: Optional[Any] = ..., to_instance: Optional[Any] = ..., in_scope: Any = ...): ...

def new_binding_to_class(binding_key: Any, to_class: Any, in_scope: Any, get_binding_loc_fn: Any): ...
def new_binding_to_instance(binding_key: Any, to_instance: Any, in_scope: Any, get_binding_loc_fn: Any): ...

class BindingSpec:
    def configure(self, bind: Any) -> None: ...
    def dependencies(self): ...
    def __eq__(self, other: Any) -> Any: ...
    def __hash__(self) -> Any: ...

def get_provider_fn_bindings(provider_fn: Any, default_arg_names: Any): ...
