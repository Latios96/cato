from . import arg_binding_keys as arg_binding_keys, errors as errors, locations as locations, scoping as scoping, support as support
from typing import Any, Optional

def annotate_arg(arg_name: Any, with_annotation: Any): ...
def inject(arg_names: Optional[Any] = ..., all_except: Optional[Any] = ...): ...
def injectable(fn: Any): ...
def provides(arg_name: Optional[Any] = ..., annotated_with: Optional[Any] = ..., in_scope: Optional[Any] = ...): ...

class ProviderDecoration:
    arg_name: Any = ...
    annotated_with: Any = ...
    in_scope_id: Any = ...
    def __init__(self, arg_name: Any, annotated_with: Any, in_scope_id: Any) -> None: ...
    def __eq__(self, other: Any) -> Any: ...
    def __ne__(self, other: Any) -> Any: ...
    def __hash__(self) -> Any: ...

def get_provider_fn_decorations(provider_fn: Any, default_arg_names: Any): ...
def is_explicitly_injectable(cls): ...
def get_injectable_arg_binding_keys(fn: Any, direct_pargs: Any, direct_kwargs: Any): ...
