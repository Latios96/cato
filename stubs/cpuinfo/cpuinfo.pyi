from typing import Any, Optional, Tuple, Dict

CPUINFO_VERSION: Tuple[int, int, int]
CPUINFO_VERSION_STRING: str
IS_PY2: bool
CAN_CALL_CPUID_IN_SUBPROCESS: bool

class DataSource:
    bits: Any = ...
    cpu_count: Any = ...
    is_windows: Any = ...
    arch_string_raw: Any = ...
    uname_string_raw: Any = ...
    can_cpuid: bool = ...
    @staticmethod
    def has_proc_cpuinfo(): ...
    @staticmethod
    def has_dmesg(): ...
    @staticmethod
    def has_var_run_dmesg_boot(): ...
    @staticmethod
    def has_cpufreq_info(): ...
    @staticmethod
    def has_sestatus(): ...
    @staticmethod
    def has_sysctl(): ...
    @staticmethod
    def has_isainfo(): ...
    @staticmethod
    def has_kstat(): ...
    @staticmethod
    def has_sysinfo(): ...
    @staticmethod
    def has_lscpu(): ...
    @staticmethod
    def has_ibm_pa_features(): ...
    @staticmethod
    def has_wmic(): ...
    @staticmethod
    def cat_proc_cpuinfo(): ...
    @staticmethod
    def cpufreq_info(): ...
    @staticmethod
    def sestatus_b(): ...
    @staticmethod
    def dmesg_a(): ...
    @staticmethod
    def cat_var_run_dmesg_boot(): ...
    @staticmethod
    def sysctl_machdep_cpu_hw_cpufrequency(): ...
    @staticmethod
    def isainfo_vb(): ...
    @staticmethod
    def kstat_m_cpu_info(): ...
    @staticmethod
    def sysinfo_cpu(): ...
    @staticmethod
    def lscpu(): ...
    @staticmethod
    def ibm_pa_features(): ...
    @staticmethod
    def wmic_cpu(): ...
    @staticmethod
    def winreg_processor_brand(): ...
    @staticmethod
    def winreg_vendor_id_raw(): ...
    @staticmethod
    def winreg_arch_string_raw(): ...
    @staticmethod
    def winreg_hz_actual(): ...
    @staticmethod
    def winreg_feature_bits(): ...

class ASM:
    restype: Any = ...
    argtypes: Any = ...
    machine_code: Any = ...
    prochandle: Any = ...
    mm: Any = ...
    func: Any = ...
    address: Any = ...
    size: int = ...
    is_selinux_enforcing: Any = ...
    def __init__(self, restype: Optional[Any] = ..., argtypes: Any = ..., machine_code: Any = ...) -> None: ...
    def compile(self) -> None: ...
    def run(self): ...
    def free(self) -> None: ...

class CPUID:
    is_selinux_enforcing: Any = ...
    def __init__(self) -> None: ...
    def get_vendor_id(self): ...
    def get_info(self): ...
    def get_max_extension_support(self): ...
    def get_flags(self, max_extension_support: Any)->Dict[str, bool]: ...
    def get_processor_brand(self, max_extension_support: Any)->str: ...
    def get_cache(self, max_extension_support: Any)->Dict[str, int]: ...
    def get_ticks_func(self): ...
    def get_raw_hz(self): ...

def get_cpu_info_json(): ...
def get_cpu_info(): ...
def main() -> None: ...
