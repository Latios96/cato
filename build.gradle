buildscript {
    repositories {
        mavenCentral()
        maven { url 'https://dl.bintray.com/palantir/releases/' }
    }

    dependencies {
        classpath 'com.palantir.gradle.conjure:gradle-conjure:4.27.2'
    }
}

plugins {
    id 'ru.vyarus.use-python' version '2.2.0'
    id "com.github.node-gradle.node" version "2.2.4"
    id "com.star-zero.gradle.githook" version "1.2.1"
}

allprojects {
    repositories {
        maven { url 'https://dl.bintray.com/palantir/releases/' }
    }
}

task install{
}
task check{
}
task build{

}

python.installVirtualenv = true
python.envPath = ".venv"

python{
	pip "poetry:1.1.4"
}

githook {
    hooks {
        "pre-commit" {
            task = "formatCheck"
        }
        "pre-push" {
            task = "lint"
        }
    }
}

task copyConjurePythonModels {
    dependsOn ':cato-api-models:compileConjurePython'
    doLast {
        copy {
            from "${rootDir}/cato-api-models/cato-api-models-python/python/cato_api_models"
            into "${rootDir}/cato_api_models"
        }
    }
}

task poetryInstall(type: PythonTask) {
	dependsOn 'pipInstall'
	dependsOn 'copyConjurePythonModels'
    command = "-m poetry install"
    inputs.file('pyproject.toml')
    inputs.file('poetry.lock')
    outputs.file('poetryInstallOutput')
}

task installOiio(type: PythonTask){
    command = "-m pip install -r oiio-requirements.txt --no-dependencies"
    inputs.file('oiio-requirements.txt')
    outputs.dir('.venv/Lib/site-packages/oiio')
}

task pythonInstall{
    dependsOn 'poetryInstall'
    dependsOn 'installOiio'
}

task pythonUnitTests(type: PythonTask){
    dependsOn 'pythonInstall'
    command = "-m pytest tests/unittests"
    inputs.dir('cato')
    inputs.dir('cato_server')
    inputs.dir('cato_api_client')
    inputs.dir('tests')
    outputs.file('pytestOutput')
}

task pythonIntegrationTests(type: PythonTask){
    dependsOn 'pythonInstall'
    dependsOn 'pythonUnitTests'
    dependsOn 'copyFrontendToBuild'
    command = "-m pytest tests/integrationtests"
    inputs.dir('cato')
    inputs.dir('cato_server')
    inputs.dir('cato_api_client')
    inputs.dir('tests')
    outputs.file('pytestOutput')
}

task copyFrontendToBuild {
    dependsOn(':frontend:yarnBuild')
    doLast {
        copy {
            from "${rootDir}/frontend/build"
            into "${rootDir}/cato_server/static"
        }
    }
}

task poetryBuild(type: PythonTask){
    dependsOn 'pythonInstall'
    dependsOn 'pythonUnitTests'
    dependsOn('pythonIntegrationTests')
    dependsOn 'copyFrontendToBuild'
    command = '-m poetry build'
    inputs.dir('cato')
    inputs.dir('cato_server')
    inputs.dir('cato_api_client')
    inputs.dir('cato_api_models')
    inputs.file('pyproject.toml')
    inputs.file('poetry.lock')
    outputs.dir('dist')
}

install.dependsOn('pythonInstall')
check.dependsOn('pythonUnitTests')
check.dependsOn('pythonIntegrationTests')
build.dependsOn('poetryBuild')

install.dependsOn(':frontend:yarnInstallDependencies')

task formatPythonCheck(type: PythonTask){
    command = '-m black cato cato_server tests cato_api_client --check'
    inputs.dir('cato')
    inputs.dir('tests')
    inputs.dir('cato_server')
    inputs.dir('cato_api_client')
    outputs.file('formatPythonCheck')
}

task formatPython(type:PythonTask){
    command = '-m black cato cato_server tests cato_api_client'
    inputs.dir('cato')
    inputs.dir('tests')
    inputs.dir('cato_server')
    inputs.dir('cato_api_client')
    outputs.file('formatPython')
}

task lintPython(type:PythonTask){
    command = '-m flake8 cato cato_server cato_api_client'
    inputs.dir('cato')
    inputs.dir('cato_server')
    inputs.dir('cato_api_client')
    outputs.file('lintPython')
}

task formatCheck{
    dependsOn 'formatPythonCheck'
    dependsOn ':frontend:formatTypescriptCheck'
}

task format{
    dependsOn 'formatPython'
    dependsOn ':frontend:formatTypescript'
}

task lint{
    dependsOn 'lintPython'
    dependsOn ':frontend:lintTypescript'
}

task buildConjure{
    dependsOn 'copyConjurePythonModels'
    dependsOn ':frontend:copyConjureTypescriptModels'
}