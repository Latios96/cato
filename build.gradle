buildscript {
    repositories {
        mavenCentral()
    }
}

plugins {
    id 'ru.vyarus.use-python' version '2.3.0'
    id "com.github.node-gradle.node" version "2.2.4"
    id "com.star-zero.gradle.githook" version "1.2.1"
}

allprojects {
    repositories {
        mavenCentral()
    }
}

task install{
}
task check{
}
task build{

}

python.installVirtualenv = true
python.envPath = ".venv"

python{
	pip "poetry:1.2.2"
}

githook {
    hooks {
        "pre-commit" {
            task = "formatCheck"
        }
        "pre-push" {
            task = "lint"
        }
    }
}

task poetryInstall(type: PythonTask) {
	dependsOn 'pipInstall'
    command = "-m poetry install"
    inputs.file('pyproject.toml')
    inputs.file('poetry.lock')
    outputs.file('poetryInstallOutput')
}

task installOiio(type: PythonTask){
    command = "-m pip install -r requirements.txt --no-dependencies"
    inputs.file('requirements.txt')
    outputs.dir('.venv/Lib/site-packages/oiio')
}

task pythonInstall{
    dependsOn 'poetryInstall'
    dependsOn 'installOiio'
}

task pythonUnitTests(type: PythonTask){
    dependsOn 'pythonInstall'
    command = "-m pytest tests/unittests -v --html=tests/reports/unittests.html --self-contained-html"
    inputs.dir('cato')
    inputs.dir('cato_server')
    inputs.dir('cato_api_client')
    inputs.dir('tests')
    outputs.file('pytestOutput')
}

task pythonIntegrationTests(type: PythonTask){
    dependsOn 'pythonInstall'
    dependsOn 'pythonUnitTests'
    dependsOn 'copyFrontendToBuild'
    command = "-m pytest tests/integrationtests -v --html=tests/reports/integrationtests.html --self-contained-html"
    inputs.dir('cato')
    inputs.dir('cato_server')
    inputs.dir('cato_api_client')
    inputs.dir('tests')
    outputs.file('pytestOutput')
}

task pythonDetectFlakySeleniumTests(type: PythonTask){
    dependsOn 'pythonInstall'
    dependsOn 'copyFrontendToBuild'
    command = "-m pytest --flake-finder --flake-runs=100 -n auto -v tests/integrationtests/cato_server/selenium --html=tests/reports/integrationtests-flake-detect.html --self-contained-html"
    inputs.dir('cato')
    inputs.dir('cato_server')
    inputs.dir('cato_api_client')
    inputs.dir('tests')
    outputs.file('pytestOutput')
}

task copyFrontendToBuild {
    dependsOn(':frontend:yarnBuild')
    doLast {
        delete "${rootDir}/cato_server/static"
        copy {
            from "${rootDir}/frontend/build"
            into "${rootDir}/cato_server/static"
        }
    }
}

task poetryBuild(type: PythonTask){
    dependsOn 'pythonInstall'
    dependsOn 'pythonUnitTests'
    dependsOn('pythonIntegrationTests')
    dependsOn 'copyFrontendToBuild'
    command = '-m poetry build'
    inputs.dir('cato')
    inputs.dir('cato_server')
    inputs.dir('cato_api_client')
    inputs.file('pyproject.toml')
    inputs.file('poetry.lock')
    outputs.dir('dist')
}

task patchRequirementsTxtIntoWheel(type: PythonTask){
    command = 'scripts/path_wheel_with_requirements_txt.py'
}
task splitWheel(type: PythonTask){
    command = 'scripts/generate_wheels.py'
}
poetryBuild.finalizedBy splitWheel

task poetryUpdate(type: PythonTask){
    command = '-m poetry update'
}

install.dependsOn('pythonInstall')
check.dependsOn('pythonUnitTests')
check.dependsOn('pythonIntegrationTests')
build.dependsOn('poetryBuild')

install.dependsOn(':frontend:yarnInstallDependencies')

task formatPythonCheck(type: PythonTask){
    command = '-m black cato cato_server tests cato_api_client cato_common scripts --check'
    inputs.dir('cato')
    inputs.dir('tests')
    inputs.dir('cato_server')
    inputs.dir('cato_api_client')
    inputs.dir('cato_common')
    outputs.file('formatPythonCheck')
}

task formatPython(type:PythonTask){
    command = '-m black cato cato_server tests cato_api_client cato_common scripts '
    inputs.dir('cato')
    inputs.dir('tests')
    inputs.dir('cato_server')
    inputs.dir('cato_api_client')
    inputs.dir('cato_common')
    outputs.file('formatPython')
}

task lintPython(type:PythonTask){
    command = '-m flake8 cato cato_server cato_api_client cato_common'
    inputs.dir('cato')
    inputs.dir('cato_server')
    inputs.dir('cato_api_client')
    inputs.dir('cato_common')
    outputs.file('lintPython')
}

task mypyCheck(type:PythonTask){
    command = '-m mypy -p cato -p cato_common'
    inputs.dir('cato')
    inputs.dir('cato_common')
    outputs.file('mypyCheck')
}

task formatCheck{
    dependsOn 'formatPythonCheck'
    dependsOn ':frontend:formatTypescriptCheck'
}

task format{
    dependsOn 'formatPython'
    dependsOn ':frontend:formatTypescript'
}

task lint{
    dependsOn 'lintPython'
    dependsOn ':frontend:lintTypescript'
    dependsOn 'mypyCheck'
}

task updateDependencies{
    dependsOn 'poetryUpdate'
    dependsOn ':frontend:yarnUpgrade'
}

task generatePyTypescriptModel(type: PythonTask){
    dependsOn 'pythonInstall'
    command = 'scripts/generate_typescript_models.py'
}

task installationTest(type: PythonTask){
    dependsOn 'splitWheel'
    command = 'scripts/install_test.py'
}